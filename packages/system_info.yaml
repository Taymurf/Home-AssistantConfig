##############################################################
### Packages / Systeminfo                                  ###
### @cvoid - https://github.com/bl0rp/Home-AssistantConfig ###
### Inspired by Norien                                     ###
### https://github.com/Norien/Home-Assistant-Config/       ###
##############################################################
homeassistant:
  customize:
  ###### NUC i7
    sensor.uname:
      icon: mdi:linux
      friendly_name: OS
    sensor.host_uptime_human:
      icon: mdi:run-fast
      friendly_name: Server Uptime
    sensor.ha_uptime_human:
      friendly_name: HA Uptime
      icon: mdi:timer
    sensor.server_uptime:
      friendly_name: Server Uptime
      icon: mdi:timer
    sensor.ha_release:
      friendly_name: 'HA Actual Version:'
      icon: mdi:home-assistant
    sensor.ha_release_local:
      friendly_name: 'HA Installation Version:'
      icon: mdi:home-assistant
    sensor.cpu_temperature:
      friendly_name: CPU Temperature
      icon: mdi:thermometer
    sensor.load_1m:
      friendly_name: CPU Load (1m)
      icon: mdi:worker
    sensor.load_5m:
      friendly_name: CPU Load (5m)
      icon: mdi:worker
    sensor.load_15m:
      friendly_name: CPU Load (15m)
      icon: mdi:worker
    sensor.processor_use:
      friendly_name: CPU Used
      icon: mdi:desktop-tower
    sensor.disk_use_:
      friendly_name: Harddrive Used
      icon: mdi:harddisk
    sensor.disk_use_percent_:
      friendly_name: Harddrive % Used
      icon: mdi:harddisk
    sensor.disk_free_:
      friendly_name: Harddrive Free
      icon: mdi:harddisk
    sensor.memory_free:
      friendly_name: RAM Free
      icon: mdi:chip
    sensor.memory_use_percent:
      friendly_name: RAM % Used
      icon: mdi:chip
    sensor.ram_used_2:
      friendly_name: RAM Used
      icon: mdi:chip
    sensor.ha_version:
      friendly_name: HA Version

    sensor.mosquitto_status:
      friendly_name: Mosquitto Server
      icon: mdi:ladybug
    sensor.smbd_status:
      friendly_name: Samba Daemon
      icon: mdi:file-cloud
    sensor.sshd_status:
      friendly_name: SSH Daemon
      icon: mdi:code-not-equal-variant
    sensor.mysql_status:
      friendly_name: MySQL Database
      icon: mdi:folder-multiple


###### STATE CARD
group:
  systeminfo:
    control: hidden
    icon: mdi:ethernet-cable
    name: Skull Canyon NUC i7
    entities:
      - sensor.host_uptime_human
      - sensor.ha_uptime_human
      # - sensor.hassuptime
      - sensor.uname
      - sensor.cpu_temperature
      - sensor.processor_use
      - sensor.load_1m
      - sensor.load_5m
      - sensor.load_15m
      # - sensor.disk_use_
      - sensor.disk_use_percent
      # - sensor.disk_free_
      # - sensor.memory_free
      - sensor.memory_use_percent
      # - sensor.ram_used_2
      # - sensor.ipv4_address_eno1
      - sensor.mosquitto_status
      - sensor.smbd_status
      - sensor.sshd_status
      - sensor.mysql_status


weblink:
  entities:
    - name: release_log
      url: https://github.com/home-assistant/home-assistant/releases


sensor:
###### NUC i7
  - platform: systemmonitor
    resources:
      - type: disk_use_percent
        arg: /
      - type: disk_use
        arg: /
      - type: disk_free
        arg: /
      - type: memory_use_percent
      - type: memory_use
      - type: memory_free
      - type: processor_use
      - type: load_1m
      - type: load_5m
      - type: load_15m
      - type: network_in
        arg: eno1
      - type: network_out
        arg: eno1
      - type: ipv4_address
        arg: eno1
      - type: ipv6_address
        arg: eno1

###### SQL Database Size
  - platform: sql
    db_url: !secret mysql_db_url
    queries:
      - name: mysql_homeassistant_size
        query: 'SELECT table_schema "database", Round(Sum(data_length + index_length) / 1024 / 1024, 1) "value" FROM information_schema.tables WHERE table_schema="homeassistant" GROUP BY table_schema;'
        column: 'value'
        unit_of_measurement: MiB

###### System Processes
  - platform: command_line
    name: "Mosquitto Status"
    command: systemctl show mosquitto.service | awk -F= '/^SubState=/ {print $2}'
    scan_interval: 60

  - platform: command_line
    name: "SMBD Status"
    command: systemctl show smbd.service | awk -F= '/^SubState=/ {print $2}'
    scan_interval: 60

  - platform: command_line
    name: "SSHD Status"
    command: systemctl show sshd.service | awk -F= '/^SubState=/ {print $2}'
    scan_interval: 60

  - platform: command_line
    name: "MySQL Status"
    command: systemctl show mysql.service | awk -F= '/^SubState=/ {print $2}'
    scan_interval: 60

  - platform: command_line
    name: CPU Temperature
    command: "cat /sys/class/thermal/thermal_zone2/temp"
    unit_of_measurement: "Â°F"
    value_template: '{{ (value | multiply(0.001)) | multiply(1.8) + 32 | round(1) | int }}'

###### Calculating human readable uptime
  - platform: command_line
    name: host_uptime_in_seconds
    command: "awk '{print $1}' /proc/uptime"
    unit_of_measurement: "sec"
    value_template: '{{ value|round }}'

  - platform: template
    sensors:
###### NUC
      host_uptime_human:
        value_template: >-
           {% macro human_time(second) -%}
             {%- set seconds = second|int -%}
             {%- set comma = joiner(', ') -%}
             {%- set intervals = {
               'weeks': 60 * 60 * 24 * 7,
               'days': 60 * 60 * 24,
               'hours': 60 * 60,
               'minutes': 60,
               'seconds': 1,
             } -%}
           
             {%- set weeks = seconds // intervals.weeks -%}
             {%- set seconds = seconds % intervals.weeks -%}
             {{- comma() ~ weeks ~ ' Week' ~ ('s' if weeks != 1) if weeks -}}
           
             {%- set days = seconds // intervals.days -%}
             {%- set seconds = seconds % intervals.days -%}
             {{- comma() ~ days ~ ' Day' ~ ('s' if days != 1) if days -}}
           
             {%- set hours = seconds // intervals.hours -%}
             {%- set seconds = seconds % intervals.hours -%}
             {{- comma() ~ hours ~ ' Hour' ~ ('s' if hours != 1) if hours -}}
           
             {%- set minutes = seconds // intervals.minutes -%}
             {{- comma() ~ minutes ~ ' Minute' ~ ('s' if minutes != 1) if minutes -}}
           
             {%- set seconds = seconds % intervals.minutes -%}
             {{- comma() ~ seconds ~ ' Second' ~ ('s' if seconds != 1) if seconds -}}
           {%- endmacro %}
           {{ human_time(states.sensor.host_uptime_in_seconds.state | int ) }}

###### Latest HA Release
  - platform: command_line
    scan_interval: 3600
    command: python3 -c "import requests; print(requests.get('https://pypi.python.org/pypi/homeassistant/json').json()['info']['version'])"
    name: HA_release

###### Local HA Version
  - platform: version
    name: HA_release_local

###### CUSTOM HA/Version
  - platform: template
    sensors:
      ha_version:
        value_template: "{%- if states.sensor.ha_release_local.state == states.sensor.ha_release.state-%}{{states.sensor.ha_release_local.state}} {% else %}{{states.sensor.ha_release.state}} Available{% endif%}"
        icon_template: >-
          {% if states.sensor.ha_release.state == states.sensor.ha_release_local.state %}
            mdi:checkbox-marked
          {% else %}
            mdi:checkbox-blank-outline
          {% endif %}

###### CUSTOM LINUX VERSION
  - platform: command_line
    command: "uname -s -r -m"
    name: 'uname'
    scan_interval: 604800

###### UPTIMES
  - platform: command_line
    name: 'ha_uptime_in_seconds'
    command: echo "$(($(date +%s) - $(date -d "$(head -n1 /home/hass/.homeassistant/home-assistant.log | cut -d' ' -f-2)" +%s)))"
    scan_interval: 30

  - platform: template
    sensors:
 
      ha_uptime_human:
        value_template: >-
           {% macro human_time(seconds) -%}
             {%- set seconds = seconds|int -%}
             {%- set comma = joiner(', ') -%}
             {%- set intervals = {
               'weeks': 60 * 60 * 24 * 7,
               'days': 60 * 60 * 24,
               'hours': 60 * 60,
               'minutes': 60,
               'seconds': 1,
             } -%}
           
             {%- set weeks = seconds // intervals.weeks -%}
             {%- set seconds = seconds % intervals.weeks -%}
             {{- comma() ~ weeks ~ ' Week' ~ ('s' if weeks != 1) if weeks -}}
           
             {%- set days = seconds // intervals.days -%}
             {%- set seconds = seconds % intervals.days -%}
             {{- comma() ~ days ~ ' Day' ~ ('s' if days != 1) if days -}}
           
             {%- set hours = seconds // intervals.hours -%}
             {%- set seconds = seconds % intervals.hours -%}
             {{- comma() ~ hours ~ ' Hour' ~ ('s' if hours != 1) if hours -}}
           
             {%- set minutes = seconds // intervals.minutes -%}
             {{- comma() ~ minutes ~ ' Minute' ~ ('s' if minutes != 1) if minutes -}}
           
             {%- set seconds = seconds % intervals.minutes -%}
             {{- comma() ~ seconds ~ ' Second' ~ ('s' if seconds != 1) if seconds -}}
           {%- endmacro %}
           {{ human_time(states.sensor.ha_uptime_in_seconds.state | int ) }}




