##############################################################
### Packages / Systeminfo                                  ###
### @cvoid - https://github.com/bl0rp/Home-AssistantConfig ###
### Inspired by Norien                                     ###
### https://github.com/Norien/Home-Assistant-Config/       ###
##############################################################
homeassistant:
  customize:
    sensor.uname:
      icon: mdi:linux
      friendly_name: OS
    sensor.host_uptime_human:
      icon: mdi:run-fast
      friendly_name: Server Uptime
    sensor.ha_uptime_human:
      friendly_name: HA Uptime
      icon: mdi:timer
    sensor.server_uptime:
      friendly_name: Server Uptime
      icon: mdi:timer
    sensor.ha_release:
      friendly_name: 'HA Actual Version:'
      icon: mdi:home-assistant
    sensor.ha_release_local:
      friendly_name: 'HA Installation Version:'
      icon: mdi:home-assistant
    sensor.cpu_temperature:
      friendly_name: CPU Temperature
      icon: mdi:thermometer
    sensor.average_load_1m:
      friendly_name: CPU Load (1m)
      icon: mdi:worker
    sensor.average_load_5m:
      friendly_name: CPU Load (5m)
      icon: mdi:worker
    sensor.average_load_15m:
      friendly_name: CPU Load (15m)
      icon: mdi:worker
    sensor.cpu_used:
      friendly_name: CPU Used
      icon: mdi:desktop-tower
    sensor.disk_used_:
      friendly_name: Harddrive Used
      icon: mdi:harddisk
    sensor.disk_used__2:
      friendly_name: Harddrive % Used
      icon: mdi:harddisk
    sensor.disk_free_:
      friendly_name: Harddrive Free
      icon: mdi:harddisk
    sensor.ram_free:
      friendly_name: RAM Free
      icon: mdi:chip
    sensor.ram_used:
      friendly_name: RAM % Used
      icon: mdi:chip
    sensor.ram_used_2:
      friendly_name: RAM Used
      icon: mdi:chip
    sensor.ipv4_address_eno1:
      friendly_name: IPv4 Address
      icon: mdi:server-network
    sensor.ipv6_address_eno1:
      friendly_name: IPv4 Address
      icon: mdi:server-network
    sensor.received_eno1:
      friendly_name: Data Received
      icon: mdi:download-network
    sensor.sent_eno1:
      friendly_name: Data Sent
      icon: mdi:upload-network


###### STATE CARD

group:

  systeminfo:
    control: hidden
    icon: mdi:ethernet-cable
    name: NUC i5
    entities:
      - sensor.host_uptime_human
      - sensor.ha_uptime_human
      - sensor.uname
      - sensor.cpu_temperature
      - sensor.cpu_used
      - sensor.average_load_1m
      - sensor.average_load_5m
      - sensor.average_load_15m
      # - sensor.disk_used_
      - sensor.disk_used__2
      # - sensor.disk_free_
      # - sensor.swap_free
      # - sensor.swap_used
      - sensor.swap_used_2
      # - sensor.ram_free
      - sensor.ram_used
      # - sensor.ram_used_2
      # - sensor.ipv4_address_eno1
      - sensor.mosquitto_state
      - sensor.sshd_state
      - sensor.pihole_state
      - sensor.homebridge_state


weblink:
  entities:
    - name: release_log
      url: https://github.com/home-assistant/home-assistant/releases

sensor:
  - platform: systemmonitor
    resources:
      - type: disk_use_percent
        arg: /
      - type: disk_use
        arg: /
      - type: disk_free
        arg: /
      - type: memory_use_percent
      - type: memory_use
      - type: memory_free
      - type: processor_use
      - type: load_1m
      - type: load_5m
      - type: load_15m
      - type: network_in
        arg: eno1
      - type: network_out
        arg: eno1
      - type: ipv4_address
        arg: eno1
      - type: ipv6_address
        arg: eno1
      - type: process
        arg: sshd
      - type: process
        arg: dhcpd
      - type: process
        arg: autossh
      - type: process
        arg: mosquitto
      - type: process
        arg: pi-hole
      - type: process
        arg: homebridge

  - platform: synologydsm
    host: !secret synology_host
    username: !secret synology_user
    password: !secret synology_pw
    monitored_conditions:
      - cpu_total_load
      - cpu_user_load
      - cpu_system_load
      - memory_real_usage
      - network_up
      - network_down
      - cpu_1min_load
      - cpu_5min_load
      - cpu_15min_load
      - disk_name
      - disk_smart_status
      - disk_exceed_bad_sector_thr
      - disk_below_remain_life_thr
      - disk_temp
      - volume_status
      - volume_device_type
      - volume_size_total
      - volume_size_used
      - volume_percentage_used
      - volume_disk_temp_avg
      - volume_disk_temp_max

  - platform: command_line
    name: CPU Temperature
    command: "cat /sys/class/thermal/thermal_zone1/temp"
    unit_of_measurement: "Â°F"
    value_template: '{{ (value | multiply(0.001)) | multiply(1.8) + 32 | round(1) | int }}'

### Calculating human readable uptime

  - platform: command_line
    name: host_uptime_in_seconds
    command: "awk '{print $1}' /proc/uptime"
    unit_of_measurement: "sec"
    value_template: '{{ value|round }}'

  - platform: template
    sensors:

      host_uptime_human:
        value_template: >-
           {% macro human_time(second) -%}
             {%- set seconds = second|int -%}
             {%- set comma = joiner(', ') -%}
             {%- set intervals = {
               'weeks': 60 * 60 * 24 * 7,
               'days': 60 * 60 * 24,
               'hours': 60 * 60,
               'minutes': 60,
               'seconds': 1,
             } -%}
           
             {%- set weeks = seconds // intervals.weeks -%}
             {%- set seconds = seconds % intervals.weeks -%}
             {{- comma() ~ weeks ~ ' Week' ~ ('s' if weeks != 1) if weeks -}}
           
             {%- set days = seconds // intervals.days -%}
             {%- set seconds = seconds % intervals.days -%}
             {{- comma() ~ days ~ ' Day' ~ ('s' if days != 1) if days -}}
           
             {%- set hours = seconds // intervals.hours -%}
             {%- set seconds = seconds % intervals.hours -%}
             {{- comma() ~ hours ~ ' Hour' ~ ('s' if hours != 1) if hours -}}
           
             {%- set minutes = seconds // intervals.minutes -%}
             {{- comma() ~ minutes ~ ' Minute' ~ ('s' if minutes != 1) if minutes -}}
           
             {%- set seconds = seconds % intervals.minutes -%}
             {{- comma() ~ seconds ~ ' Second' ~ ('s' if seconds != 1) if seconds -}}
           {%- endmacro %}
           {{ human_time(states.sensor.host_uptime_in_seconds.state | int ) }}
###### Latest HA Release
  - platform: command_line
    scan_interval: 3600
    command: python3 -c "import requests; print(requests.get('https://pypi.python.org/pypi/homeassistant/json').json()['info']['version'])"
    name: HA_release

###### Local HA Version
  - platform: version
    name: HA_release_local

###### CUSTOM HA/Version
  - platform: template
    sensors:
      ha_version:
        value_template: "{%- if states.sensor.ha_release_local.state == states.sensor.ha_release.state-%}{{states.sensor.ha_release_local.state}} {% else %}{{states.sensor.ha_release.state}} Available{% endif%}"
        icon_template: >-
          {% if states.sensor.ha_release.state == states.sensor.ha_release_local.state %}
            mdi:checkbox-marked
          {% else %}
            mdi:checkbox-blank-outline
          {% endif %}
###### CUSTOM LINUX VERSION
  - platform: command_line
    command: "uname -s -r -m"
    name: 'uname'
    scan_interval: 604800

###### UPTIMES
  - platform: command_line
    name: 'ha_uptime_in_seconds'
    command: echo "$(($(date +%s) - $(date -d "$(head -n1 /home/hass/.homeassistant/home-assistant.log | cut -d' ' -f-2)" +%s)))"
    scan_interval: 30

  - platform: template
    sensors:
 
      ha_uptime_human:
        value_template: >-
           {% macro human_time(seconds) -%}
             {%- set seconds = seconds|int -%}
             {%- set comma = joiner(', ') -%}
             {%- set intervals = {
               'weeks': 60 * 60 * 24 * 7,
               'days': 60 * 60 * 24,
               'hours': 60 * 60,
               'minutes': 60,
               'seconds': 1,
             } -%}
           
             {%- set weeks = seconds // intervals.weeks -%}
             {%- set seconds = seconds % intervals.weeks -%}
             {{- comma() ~ weeks ~ ' Week' ~ ('s' if weeks != 1) if weeks -}}
           
             {%- set days = seconds // intervals.days -%}
             {%- set seconds = seconds % intervals.days -%}
             {{- comma() ~ days ~ ' Day' ~ ('s' if days != 1) if days -}}
           
             {%- set hours = seconds // intervals.hours -%}
             {%- set seconds = seconds % intervals.hours -%}
             {{- comma() ~ hours ~ ' Hour' ~ ('s' if hours != 1) if hours -}}
           
             {%- set minutes = seconds // intervals.minutes -%}
             {{- comma() ~ minutes ~ ' Minute' ~ ('s' if minutes != 1) if minutes -}}
           
             {%- set seconds = seconds % intervals.minutes -%}
             {{- comma() ~ seconds ~ ' Second' ~ ('s' if seconds != 1) if seconds -}}
           {%- endmacro %}
           {{ human_time(states.sensor.ha_uptime_in_seconds.state | int ) }}

  - platform: template
    sensors:
      mosquitto_state:
        friendly_name: "Mosquitto"
        value_template: >-
          {% if is_state('sensor.process_mosquitto', 'on') %}
            Running
          {% else %}
            Disabled
          {% endif %}
        icon_template: >-
          {% if is_state('sensor.process_mosquitto', 'on') %}
            mdi:checkbox-marked
          {% else %}
            mdi:checkbox-blank-outline
          {% endif %}

  - platform: template
    sensors:
      sshd_state:
        friendly_name: "SSHD"
        value_template: >-
          {% if is_state('sensor.process_sshd', 'on') %}
            Running
          {% else %}
            Disabled
          {% endif %}
        icon_template: >-
          {% if is_state('sensor.process_sshd', 'on') %}
            mdi:checkbox-marked
          {% else %}
            mdi:checkbox-blank-outline
          {% endif %}

  # - platform: template
  #   sensors:
  #     pihole_state:
  #       friendly_name: "Pi-hole State"
  #       value_template: >-
  #         {% if is_state('sensor.process_pihole', 'on') %}
  #           Running
  #         {% else %}
  #           Disabled
  #         {% endif %}
  #       icon_template: >-
  #         {% if is_state('sensor.process_pihole', 'on') %}
  #           mdi:checkbox-marked
  #         {% else %}
  #           mdi:checkbox-blank-outline
  #         {% endif %}

  # - platform: template
  #   sensors:
  #     homebridge_state:
  #       friendly_name: "Homebridge State"
  #       value_template: >-
  #         {% if is_state('sensor.process_homebridge', 'on') %}
  #           Running
  #         {% else %}
  #           Disabled
  #         {% endif %}
  #       icon_template: >-
  #         {% if is_state('sensor.process_homebridge', 'on') %}
  #           mdi:checkbox-marked
  #         {% else %}
  #           mdi:checkbox-blank-outline
  #         {% endif %}