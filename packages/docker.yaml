################################################################
## Packages / Docker-mon and monitoring containers
################################################################

homeassistant:
  customize:
    sensor.docker_status:
      friendly_name: Docker Server
      icon: mdi:folder-multiple
    switch.weavescope:
      icon: mdi:folder-multiple
    switch.grafana:
      icon: mdi:chart-line-variant
    switch.portainer:
      icon: mdi:group
    switch.glances:
      icon: mdi:desktop-tower
    switch.plex:
      icon: mdi:plex
    switch.plexpy:
      icon: mdi:plex


group:
  docker_containers:
    name: Docker Containers
    control: hidden
    entities:
      - sensor.docker_status
      - switch.plex
      - switch.plexpy
      - switch.portainer
      - switch.weavescope
      - switch.grafana
      - switch.glances


sensor:
  - platform: command_line
    name: "Docker Status"
    command: systemctl show docker.service | awk -F= '/^SubState=/ {print $2}'
    scan_interval: 60


switch:
  - platform: rest
    resource: !secret docker_grafana
    name: Grafana
    body_on: '{"state": "start"}'
    body_off: '{"state": "stop"}'
    is_on_template: '{{ value_json is not none and value_json.state == "running" }}'

  - platform: rest
    resource: !secret docker_portainer
    name: Portainer
    body_on: '{"state": "start"}'
    body_off: '{"state": "stop"}'
    is_on_template: '{{ value_json is not none and value_json.state == "running" }}'

  - platform: rest
    resource: !secret docker_glances
    name: Glances
    body_on: '{"state": "start"}'
    body_off: '{"state": "stop"}'
    is_on_template: '{{ value_json is not none and value_json.state == "running" }}'

  - platform: rest
    resource: !secret docker_plex
    name: Plex
    body_on: '{"state": "start"}'
    body_off: '{"state": "stop"}'
    is_on_template: '{{ value_json is not none and value_json.state == "running" }}'

  - platform: rest
    resource: !secret docker_weavescope
    name: WeaveScope
    body_on: '{"state": "start"}'
    body_off: '{"state": "stop"}'
    is_on_template: '{{ value_json is not none and value_json.state == "running" }}'

  - platform: rest
    resource: !secret docker_plexpy
    name: PlexPy
    body_on: '{"state": "start"}'
    body_off: '{"state": "stop"}'
    is_on_template: '{{ value_json is not none and value_json.state == "running" }}'


automation:
  - alias: Alert when a critical container goes offline
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: switch.grafana, switch.plex
        to: 'off'
        for:
          minutes: 5
    condition:
      condition: and
      conditions:
        # Only send this once per hour
        - condition: template
          value_template: >
            {% if states.automation.alert_when_a_critical_container_goes_offline.last_triggered is not none %}
              {% if as_timestamp(now()) | int   -  as_timestamp(states.automation.alert_when_a_critical_container_goes_offline.attributes.last_triggered) | int > 3600 %} true {% else %} false
              {% endif %}
            {% else %}
            false
            {% endif %}
    action:
      - service: notify.taylor
        data_template:
          message: 'Docker container for {{ trigger.to_state.name }} is not running. Please check the status of this container as some features may stop functioning.'
          title: Container Alert
      - service: persistent_notification.create
        data_template:
          notification_id: offline_container
          title: Container Offline
          message: >
            Docker container for {{ trigger.to_state.name }} is not running. Please check the status of this container as some features may stop functioning.

  # - alias: Stop Plex Media Server at night
  #   trigger:
  #     - platform: time
  #       at: '00:00:00'
  #     - platform: state
  #       entity_id: remote.living_room
  #       to: 'off'
  #   condition:
  #     condition: and
  #     conditions:
  #       - condition: state
  #         entity_id: switch.plex_container
  #         state: 'on'
  #       - condition: state
  #         entity_id: remote.living_room
  #         state: 'off'
  #       - condition: time
  #         before: '06:00:00'
  #   action:
  #     - service: homeassistant.turn_off
  #       entity_id: switch.plex_container